#!/bin/bash

# Welcome to the monfresh laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\\n%s\\n" "$text" >> "$file"
  fi
}

create_zshrc_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.zshrc" ]; then
    touch "$HOME/.zshrc"
  fi

  shell_file="$HOME/.zshrc"
}

create_zprofile_and_set_as_zprofile_file(){
  if [ ! -f "$HOME/.zprofile" ]; then
    touch "$HOME/.zprofile"
  fi

  zprofile_file="$HOME/.zprofile"
}

create_bash_profile_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.bash_profile" ]; then
    touch "$HOME/.bash_profile"
  fi

  shell_file="$HOME/.bash_profile"
}

change_shell_to_zsh() {
  fancy_echo "Please enter your password to continue."
  echo "Note that there won't be visual feedback when you type your password."
  echo "Type it slowly and press return, or press control-c to cancel the switch to zsh and exit the script."
  create_zshrc_and_set_it_as_shell_file
  create_zprofile_and_set_as_zprofile_file
  chsh -s "$(command -v zsh)"
  echo "Note that you can always switch back to ${bold}bash${normal} if you change your mind."
  echo "The instructions for changing shells manually are available in the README."
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

case "$SHELL" in
  */zsh) :
    create_zshrc_and_set_it_as_shell_file
    ;;
  *)
    create_bash_profile_and_set_it_as_shell_file
    if [ -z "$CI" ]; then
      bold=$(tput bold)
      normal=$(tput sgr0)
      echo "Want to switch your shell from the default ${bold}bash${normal} to ${bold}zsh${normal}?"
      echo "Both work fine for development, and ${bold}zsh${normal} has some extra "
      echo "features for customization and tab completion."
      echo "If you aren't sure or don't care, we recommend ${bold}zsh${normal}."
      echo -n "Press ${bold}y${normal} to switch to zsh, ${bold}n${normal} to keep bash: "
      read -r -n 1 response
      if [ "$response" = "y" ]; then
        fancy_echo "=== Getting ready to change your shell to zsh. ==="
        if ! grep -qs "$(command -v zsh)" /etc/shells; then
          echo "It looks like your version of zsh is missing from ${bold}/etc/shells${normal}."
          echo "It must be added there manually before your shell can be changed."
          echo "Open ${bold}/etc/shells${normal} with your favorite text editor,"
          echo "then add ${bold}$(command -v zsh)${normal} in a new line and save the file."
          echo -n "Once you've added it, press ${bold}y${normal} to continue, or ${bold}n${normal} to cancel: "
          read -r -n 1 response
          if [ "$response" = "y" ]; then
            change_shell_to_zsh
          else
            fancy_echo "Shell will not be changed."
          fi
        else
          change_shell_to_zsh
        fi
      else
        fancy_echo "Shell will not be changed."
      fi
    else
      fancy_echo "CI System detected, will not change shells"
    fi
    ;;
esac

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap | grep -Fqx "$1"
}


app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | grep -E '.app' > /dev/null
}


# shellcheck disable=SC2016
append_to_file "$shell_file" 'export PATH="$HOME/.bin:$PATH"'

# check if dev tools are installed by checking if git is present
if ! command -v git >/dev/null; then
  fancy_echo "Installing Command Line Tools ..."
  fancy_echo "(check the dialog)"
  xcode-select --install
  fancy_echo "Command Line Tools installed."
else
  fancy_echo "Command Line Tools already installed. Skipping ..."
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."

  create_zprofile_and_set_as_zprofile_file

  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

  # - Run these two commands in your terminal to add Homebrew to your PATH:
  # (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/<HOME>/.zprofile
  # eval "$(/opt/homebrew/bin/brew shellenv)"

  # shellcheck disable=SC2016
  append_to_file "$shell_file" 'export PATH="/usr/local/bin:$PATH"'
  append_to_file "$zprofile_file" 'eval "$(/opt/homebrew/bin/brew shellenv)"'
  eval "$(/opt/homebrew/bin/brew shellenv)"

  fancy_echo "Homebrew installed."
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Configuring Homebrew..."

# Remove brew-cask since it is now installed as part of brew tap caskroom/cask.
# See https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'; then
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'; then
  brew untap caskroom/versions
fi

fancy_echo "Updating Homebrew ..."
cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if brew bundle --file="$HOME/Brewfile"; then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."
  echo "This is usually due to one of the Mac apps being already installed,"
  echo "in which case, you can ignore these errors."
fi

fancy_echo "Homebrew configured."



#
# VSCODE SETUP 
#
fancy_echo "Configuring Visual Studio Code..."

# cli
if ! command -v code >/dev/null; then
  fancy_echo "Installing Code CLI ..."
  vscode_cli_url="https://raw.githubusercontent.com/microsoft/vscode/master/resources/darwin/bin/code.sh"
  vscode_cli_file="/usr/local/bin/code"
  curl $vscode_cli_url > $vscode_cli_file
else
  fancy_echo "Code CLI already installed. Skipping ..."
fi

# plugins
code --install-extension eamodio.gitlens --force
code --install-extension esbenp.prettier-vscode --force
code --install-extension ms-python.python --force
code --install-extension ms-azuretools.vscode-docker --force
code --install-extension dbaeumer.vscode-eslint --force
code --install-extension vscode-icons-team.vscode-icons --force
code --install-extension dbaeumer.vscode-eslint --force
code --install-extension ms-vscode.vscode-typescript-tslint-plugin --force
code --install-extension VisualStudioExptTeam.vscodeintellicode --force
code --install-extension ms-vsliveshare.vsliveshare --force
code --install-extension formulahendry.terminal --force
code --install-extension timonwong.shellcheck --force

# settings

#create Visual Studio Code user settings json file, if not present
if [ ! -f ~/Library/Application\ Support/Code/User/settings.json ]; then

  fancy_echo "Creating Visual Studio Code User settings."

  mkdir -p ~/Library/Application\ Support/Code/User/
  touch ~/Library/Application\ Support/Code/User/settings.json
  cat > ~/Library/Application\ Support/Code/User/settings.json <<- EOM
{
  "editor.formatOnSave": true,
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.fontLigatures": true,
  "editor.fontFamily": "'Jetbrains Mono', Menlo, Monaco, 'Courier New', monospace",
  "workbench.iconTheme": "vscode-icons",
  "window.zoomLevel": 0,
  "workbench.editor.enablePreview": false,
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "java.configuration.checkProjectSettingsExclusions": false,
  "sync.gist": "7592a86456ef667729182a4ddedcde1e",
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "editor.minimap.enabled": false
}
EOM

else
 fancy_echo "Visual Studio Code User settings already configured."
fi

fancy_echo "Visual Studio Code configured."

#
# NODENV
#

# init
fancy_echo "Configuring nodenv..."
eval "nodenv init -"

# add nodenv initialization to the shell file, if not already present
fancy_echo "patching nodenv init into .zshrc file"
nodenv_init="eval \"\$(nodenv init -)\""
cat "$HOME/.zshrc" | grep "$nodenv_init" > /dev/null || echo "$nodenv_init" >> "$HOME/.zshrc"

# nodenv yarn 
NODENV_ROOT_PLUGIN="$(nodenv root)/plugins"
YARN_ROOT="$NODENV_ROOT_PLUGIN/nodenv-yarn-install"

fancy_echo "patching yarn with nodenv"

if [ ! -d "$YARN_ROOT" ]; then
  mkdir -p "$NODENV_ROOT_PLUGIN"
  git clone https://github.com/pine/nodenv-yarn-install.git "$YARN_ROOT"
else
  git -C "$YARN_ROOT" pull
fi

fancy_echo "nodenv configured."

#
# SHELL
#

fancy_echo "Configuring OH-MY-ZSH..."

# oh-my-zsh

#if ZSH is already installed, skip install process and load variables
if [ ! -d "$ZSH" ]; then
  fancy_echo "Installing omyzsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else 
  fancy_echo "Setting omyzsh variables."
  #we assume that ZSH_CUSTOM is in path $ZSH/custom
  ZSH_CUSTOM=$ZSH/custom
fi


# spaceship

if [ "$ZSH_CUSTOM" ] && [ -d "$ZSH_CUSTOM" ]; then

  SPACESHIP_ROOT="$ZSH_CUSTOM/themes/spaceship-prompt"

  if [ ! -d "$SPACESHIP_ROOT" ]; then
    fancy_echo "Installing spaceship..."
    git clone https://github.com/denysdovhan/spaceship-prompt.git $ZSH_CUSTOM/themes/spaceship-prompt
    ln -s "$SPACESHIP_ROOT/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"
    fancy_echo "Setting spaceship as default theme..."
    sed -i "" "s/^ZSH_THEME=.*/ZSH_THEME=\"spaceship\"/g" "$HOME/.zshrc"
  else
    fancy_echo "Updating spaceship..."
    git -C "$SPACESHIP_ROOT" pull
  fi

  fancy_echo "OH-MY-ZSH configured."

else
  fancy_echo "ZSH_CUSTOM not found or unexisting folder! spaceship installation skipped."
fi


# save laptop.local command 
if [ -f "$HOME/.laptop.local" ]; then
  # shellcheck source=/dev/null
  . "$HOME/.laptop.local"
fi

fancy_echo 'All done!'
